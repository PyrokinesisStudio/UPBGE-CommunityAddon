uniform sampler2D bgl_RenderedTexture;
uniform sampler2D texture;
uniform float opacity;

uniform vec4 filter_color;
uniform float threshold;
uniform int samples;

void main()
{
	vec2 xy = gl_TexCoord[0].st;
	vec4 texture_color = texture2D(texture, xy);
	vec4 render_color  = texture2D(bgl_RenderedTexture, xy);
	
	//We can filter out a given color
	float alpha = 0;
	vec4 diff = abs(texture_color - filter_color);
	
	for (int i = 1; i <= samples; i++) alpha += (diff.r < threshold*i/samples && diff.g < threshold*i/samples && diff.b < threshold*i/samples) ? 1.0-filter_color.a : 1.0;
	alpha /= samples;
	
	//Mix with the render color to create transparency.
	gl_FragColor = mix(render_color, texture_color, texture_color.a * opacity * alpha);
}